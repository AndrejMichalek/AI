def train(file):
    # Trening
    # https://www.gymlibrary.dev/environments/atari/pong/
    env = gym.make("ALE/Pong-v5", frameskip=1, full_action_space=False)

    env = AtariPreprocessing(env, frame_skip=4) #https://www.gymlibrary.dev/api/wrappers/#available-wrappers
    env = FrameStack(env, 4)

    scores = []

    experience_replay = ExperienceReplay(10000, state_shape)
    model = torch.load("network3.pt")
    learningRate=0.0000005
    agent = AgentDQN(0.99, action_count, model, experience_replay, learningRate, epsilon_min=0.01, epsilon=0.2, epsilon_dec=0.0001)

    DH=DataHandler("test2.csv")

    for i in range(1, GAME_COUNT):
        score = 0
        terminal, truncated = False, False
        state, _ = env.reset()
        state = torch.from_numpy(np.asarray(state)).double()

        # GAME LOOP
        DH.startGame()

        while not terminal and not truncated:
            action = agent.choose_action(state)
            state_, reward, terminal, truncated, info = env.step(action)
            state_ = torch.from_numpy(np.asarray(state_)).double()
            agent.store(state, action, reward, state_, terminal)
            agent.learn()
            state = state_
            score += reward

            DH.add(action,reward)

        scores.append(score)

        DH.endGame(agent.epsilon,learningRate)

        print('Episode: ', i, '\t\tscore: ', score, '\t\taverage score:' , np.average(scores[-100:]), '\t\tepsilon: ', agent.epsilon)

        

    DH.saveToFile()
    env.close()
    torch.save(model, "networkTest.pt")
    print("Priemerne skore: " + str(np.average(scores)))